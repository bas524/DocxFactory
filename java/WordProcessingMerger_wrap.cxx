/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus

/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {

  struct SwigMovePointer {
    T *ptr;

    SwigMovePointer(T *p) : ptr(p) {
    }

    ~SwigMovePointer() {
      delete ptr;
    }

    SwigMovePointer& operator=(SwigMovePointer& rhs) {
      T* oldptr = ptr;
      ptr = 0;
      delete oldptr;
      ptr = rhs.ptr;
      rhs.ptr = 0;
      return *this;
    }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:

  SwigValueWrapper() : pointer(0) {
  }

  SwigValueWrapper& operator=(const T& t) {
    SwigMovePointer tmp(new T(t));
    pointer = tmp;
    return *this;
  }

  operator T&() const {
    return *pointer.ptr;
  }

  T *operator&() {
    return pointer.ptr;
  }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#define SWIGTEMPLATEDISAMBIGUATOR template
#elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#define SWIGTEMPLATEDISAMBIGUATOR template
#else
#define SWIGTEMPLATEDISAMBIGUATOR
#endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#define SWIGINLINE inline
#else
#define SWIGINLINE
#endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define SWIGUNUSED __attribute__ ((__unused__))
#else
#define SWIGUNUSED
#endif
#elif defined(__ICC)
#define SWIGUNUSED __attribute__ ((__unused__))
#else
#define SWIGUNUSED
#endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#if defined(_MSC_VER)
#pragma warning(disable : 4505) /* unreferenced local function has been removed */
#endif
#endif

#ifndef SWIGUNUSEDPARM
#ifdef __cplusplus
#define SWIGUNUSEDPARM(p)
#else
#define SWIGUNUSEDPARM(p) p SWIGUNUSED
#endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#ifndef GCC_HASCLASSVISIBILITY
#define GCC_HASCLASSVISIBILITY
#endif
#endif

#ifndef SWIGEXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define SWIGEXPORT
#else
#define SWIGEXPORT __declspec(dllexport)
#endif
#else
#if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define SWIGEXPORT __attribute__ ((visibility("default")))
#else
#define SWIGEXPORT
#endif
#endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#define SWIGSTDCALL __stdcall
#else
#define SWIGSTDCALL
#endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
#define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
#ifdef _LP64
#undef _LP64
#endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>

/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;

static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError"},
    { SWIG_JavaIOException, "java/io/IOException"},
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException"},
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException"},
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException"},
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException"},
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException"},
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException"},
    { SWIG_JavaUnknownError, "java/lang/UnknownError"},
    { (SWIG_JavaExceptionCodes) 0, "java/lang/UnknownError"}
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "dfw.h"
#include <exception>


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_load(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_load((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_save(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_save((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_print(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  char *arg1 = (char *) 0;
  unsigned short arg2;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = (unsigned short) jarg2;
  dfw_print((char const *) arg1, arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_close(JNIEnv *jenv, jclass jcls) {
  (void) jenv;
  (void) jcls;
  dfw_close();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_merge(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_merge((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setChartValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jdouble jarg5) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  char *arg4 = (char *) 0;
  double arg5;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *) jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return;
  }
  arg5 = (double) jarg5;
  dfw_setChartValueByStrStr((char const *) arg1, (char const *) arg2, (char const *) arg3, (char const *) arg4, arg5);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *) arg4);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setChartValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  double arg4;
  double arg5;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = (double) jarg4;
  arg5 = (double) jarg5;
  dfw_setChartValueByStrDouble((char const *) arg1, (char const *) arg2, (char const *) arg3, arg4, arg5);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setChartValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  double arg3;
  double arg4;
  double arg5;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = (double) jarg3;
  arg4 = (double) jarg4;
  arg5 = (double) jarg5;
  dfw_setChartValueByDoubleDouble((char const *) arg1, (char const *) arg2, arg3, arg4, arg5);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setClipboardValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  dfw_setClipboardValueByStr((char const *) arg1, (char const *) arg2, (char const *) arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setClipboardValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  double arg3;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = (double) jarg3;
  dfw_setClipboardValueByDouble((char const *) arg1, (char const *) arg2, arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_paste(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_paste((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setUpdateTocMethod(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  unsigned char arg1;

  (void) jenv;
  (void) jcls;
  arg1 = (unsigned char) jarg1;
  dfw_setUpdateTocMethod(arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT jshort JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getUpdateTocMethod(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0;
  unsigned char result;

  (void) jenv;
  (void) jcls;
  result = (unsigned char) dfw_getUpdateTocMethod();
  jresult = (jshort) result;
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getFields(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getFields();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getItems(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getItems();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getItemParent(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0;
  char *arg1 = (char *) 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *) dfw_getItemParent((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getItemFields(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0;
  char *arg1 = (char *) 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *) dfw_getItemFields((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setCodePage(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_setCodePage((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setNumFracSep(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  char arg1;

  (void) jenv;
  (void) jcls;
  arg1 = (char) jarg1;
  dfw_setNumFracSep(arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setNumThSep(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  char arg1;

  (void) jenv;
  (void) jcls;
  arg1 = (char) jarg1;
  dfw_setNumThSep(arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setDateFormat(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_setDateFormat((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setYearOffset(JNIEnv *jenv, jclass jcls, jint jarg1) {
  unsigned short arg1;

  (void) jenv;
  (void) jcls;
  arg1 = (unsigned short) jarg1;
  dfw_setYearOffset(arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setFirstWeekDay(JNIEnv *jenv, jclass jcls, jint jarg1) {
  unsigned short arg1;

  (void) jenv;
  (void) jcls;
  arg1 = (unsigned short) jarg1;
  dfw_setFirstWeekDay(arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setWeekDayNames_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  (void) jenv;
  (void) jcls;
  dfw_setWeekDayNames0();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setWeekDayNames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  char *arg4 = (char *) 0;
  char *arg5 = (char *) 0;
  char *arg6 = (char *) 0;
  char *arg7 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *) jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *) jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *) jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *) jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return;
  }
  dfw_setWeekDayNames7((char const *) arg1, (char const *) arg2, (char const *) arg3, (char const *) arg4, (char const *) arg5, (char const *) arg6, (char const *) arg7);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *) arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *) arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *) arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *) arg7);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setWeekDayNames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  char *arg4 = (char *) 0;
  char *arg5 = (char *) 0;
  char *arg6 = (char *) 0;
  char *arg7 = (char *) 0;
  char *arg8 = (char *) 0;
  char *arg9 = (char *) 0;
  char *arg10 = (char *) 0;
  char *arg11 = (char *) 0;
  char *arg12 = (char *) 0;
  char *arg13 = (char *) 0;
  char *arg14 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *) jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *) jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *) jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *) jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *) jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *) jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return;
  }
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *) jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return;
  }
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *) jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return;
  }
  arg12 = 0;
  if (jarg12) {
    arg12 = (char *) jenv->GetStringUTFChars(jarg12, 0);
    if (!arg12) return;
  }
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *) jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return;
  }
  arg14 = 0;
  if (jarg14) {
    arg14 = (char *) jenv->GetStringUTFChars(jarg14, 0);
    if (!arg14) return;
  }
  dfw_setWeekDayNames14((char const *) arg1, (char const *) arg2, (char const *) arg3, (char const *) arg4, (char const *) arg5, (char const *) arg6, (char const *) arg7, (char const *) arg8, (char const *) arg9, (char const *) arg10, (char const *) arg11, (char const *) arg12, (char const *) arg13, (char const *) arg14);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *) arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *) arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *) arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *) arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *) arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *) arg9);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *) arg10);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *) arg11);
  if (arg12) jenv->ReleaseStringUTFChars(jarg12, (const char *) arg12);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *) arg13);
  if (arg14) jenv->ReleaseStringUTFChars(jarg14, (const char *) arg14);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setMonthNames_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  (void) jenv;
  (void) jcls;
  dfw_setMonthNames0();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setMonthNames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jstring jarg12) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  char *arg4 = (char *) 0;
  char *arg5 = (char *) 0;
  char *arg6 = (char *) 0;
  char *arg7 = (char *) 0;
  char *arg8 = (char *) 0;
  char *arg9 = (char *) 0;
  char *arg10 = (char *) 0;
  char *arg11 = (char *) 0;
  char *arg12 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *) jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *) jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *) jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *) jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *) jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *) jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return;
  }
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *) jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return;
  }
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *) jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return;
  }
  arg12 = 0;
  if (jarg12) {
    arg12 = (char *) jenv->GetStringUTFChars(jarg12, 0);
    if (!arg12) return;
  }
  dfw_setMonthNames12((char const *) arg1, (char const *) arg2, (char const *) arg3, (char const *) arg4, (char const *) arg5, (char const *) arg6, (char const *) arg7, (char const *) arg8, (char const *) arg9, (char const *) arg10, (char const *) arg11, (char const *) arg12);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *) arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *) arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *) arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *) arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *) arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *) arg9);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *) arg10);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *) arg11);
  if (arg12) jenv->ReleaseStringUTFChars(jarg12, (const char *) arg12);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setMonthNames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jstring jarg12, jstring jarg13, jstring jarg14, jstring jarg15, jstring jarg16, jstring jarg17, jstring jarg18, jstring jarg19, jstring jarg20, jstring jarg21, jstring jarg22, jstring jarg23, jstring jarg24) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  char *arg3 = (char *) 0;
  char *arg4 = (char *) 0;
  char *arg5 = (char *) 0;
  char *arg6 = (char *) 0;
  char *arg7 = (char *) 0;
  char *arg8 = (char *) 0;
  char *arg9 = (char *) 0;
  char *arg10 = (char *) 0;
  char *arg11 = (char *) 0;
  char *arg12 = (char *) 0;
  char *arg13 = (char *) 0;
  char *arg14 = (char *) 0;
  char *arg15 = (char *) 0;
  char *arg16 = (char *) 0;
  char *arg17 = (char *) 0;
  char *arg18 = (char *) 0;
  char *arg19 = (char *) 0;
  char *arg20 = (char *) 0;
  char *arg21 = (char *) 0;
  char *arg22 = (char *) 0;
  char *arg23 = (char *) 0;
  char *arg24 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *) jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *) jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *) jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *) jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *) jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *) jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *) jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return;
  }
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *) jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return;
  }
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *) jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return;
  }
  arg12 = 0;
  if (jarg12) {
    arg12 = (char *) jenv->GetStringUTFChars(jarg12, 0);
    if (!arg12) return;
  }
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *) jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return;
  }
  arg14 = 0;
  if (jarg14) {
    arg14 = (char *) jenv->GetStringUTFChars(jarg14, 0);
    if (!arg14) return;
  }
  arg15 = 0;
  if (jarg15) {
    arg15 = (char *) jenv->GetStringUTFChars(jarg15, 0);
    if (!arg15) return;
  }
  arg16 = 0;
  if (jarg16) {
    arg16 = (char *) jenv->GetStringUTFChars(jarg16, 0);
    if (!arg16) return;
  }
  arg17 = 0;
  if (jarg17) {
    arg17 = (char *) jenv->GetStringUTFChars(jarg17, 0);
    if (!arg17) return;
  }
  arg18 = 0;
  if (jarg18) {
    arg18 = (char *) jenv->GetStringUTFChars(jarg18, 0);
    if (!arg18) return;
  }
  arg19 = 0;
  if (jarg19) {
    arg19 = (char *) jenv->GetStringUTFChars(jarg19, 0);
    if (!arg19) return;
  }
  arg20 = 0;
  if (jarg20) {
    arg20 = (char *) jenv->GetStringUTFChars(jarg20, 0);
    if (!arg20) return;
  }
  arg21 = 0;
  if (jarg21) {
    arg21 = (char *) jenv->GetStringUTFChars(jarg21, 0);
    if (!arg21) return;
  }
  arg22 = 0;
  if (jarg22) {
    arg22 = (char *) jenv->GetStringUTFChars(jarg22, 0);
    if (!arg22) return;
  }
  arg23 = 0;
  if (jarg23) {
    arg23 = (char *) jenv->GetStringUTFChars(jarg23, 0);
    if (!arg23) return;
  }
  arg24 = 0;
  if (jarg24) {
    arg24 = (char *) jenv->GetStringUTFChars(jarg24, 0);
    if (!arg24) return;
  }
  dfw_setMonthNames24((char const *) arg1, (char const *) arg2, (char const *) arg3, (char const *) arg4, (char const *) arg5, (char const *) arg6, (char const *) arg7, (char const *) arg8, (char const *) arg9, (char const *) arg10, (char const *) arg11, (char const *) arg12, (char const *) arg13, (char const *) arg14, (char const *) arg15, (char const *) arg16, (char const *) arg17, (char const *) arg18, (char const *) arg19, (char const *) arg20, (char const *) arg21, (char const *) arg22, (char const *) arg23, (char const *) arg24);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *) arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *) arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *) arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *) arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *) arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *) arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *) arg9);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *) arg10);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *) arg11);
  if (arg12) jenv->ReleaseStringUTFChars(jarg12, (const char *) arg12);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *) arg13);
  if (arg14) jenv->ReleaseStringUTFChars(jarg14, (const char *) arg14);
  if (arg15) jenv->ReleaseStringUTFChars(jarg15, (const char *) arg15);
  if (arg16) jenv->ReleaseStringUTFChars(jarg16, (const char *) arg16);
  if (arg17) jenv->ReleaseStringUTFChars(jarg17, (const char *) arg17);
  if (arg18) jenv->ReleaseStringUTFChars(jarg18, (const char *) arg18);
  if (arg19) jenv->ReleaseStringUTFChars(jarg19, (const char *) arg19);
  if (arg20) jenv->ReleaseStringUTFChars(jarg20, (const char *) arg20);
  if (arg21) jenv->ReleaseStringUTFChars(jarg21, (const char *) arg21);
  if (arg22) jenv->ReleaseStringUTFChars(jarg22, (const char *) arg22);
  if (arg23) jenv->ReleaseStringUTFChars(jarg23, (const char *) arg23);
  if (arg24) jenv->ReleaseStringUTFChars(jarg24, (const char *) arg24);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getCodePage(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getCodePage();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jchar JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getNumFracSep(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0;
  char result;

  (void) jenv;
  (void) jcls;
  result = (char) dfw_getNumFracSep();
  jresult = (jchar) result;
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  return jresult;
}

SWIGEXPORT jchar JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getNumThSep(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0;
  char result;

  (void) jenv;
  (void) jcls;
  result = (char) dfw_getNumThSep();
  jresult = (jchar) result;
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getDateFormat(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getDateFormat();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jint JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getYearOffset(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0;
  unsigned short result;

  (void) jenv;
  (void) jcls;
  result = (unsigned short) dfw_getYearOffset();
  jresult = (jint) result;
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  return jresult;
}

SWIGEXPORT jint JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getFirstWeekDay(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0;
  unsigned short result;

  (void) jenv;
  (void) jcls;
  result = (unsigned short) dfw_getFirstWeekDay();
  jresult = (jint) result;
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getWeekDayFullNames(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getWeekDayFullNames();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getWeekDayShortNames(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getWeekDayShortNames();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getMonthFullNames(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getMonthFullNames();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getMonthShortNames(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getMonthShortNames();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT void JNICALL Java_com_docxfactory_WordProcessingMergerJNI_setTempDir(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0;

  (void) jenv;
  (void) jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *) jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return;
  }
  dfw_setTempDir((char const *) arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *) arg1);
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getTempDir(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getTempDir();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_com_docxfactory_WordProcessingMergerJNI_getWorkDir(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0;
  char *result = 0;

  (void) jenv;
  (void) jcls;
  result = (char *) dfw_getWorkDir();
  if (dfw_getErrorFlag())
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, dfw_getErrorWhat());
  if (result) jresult = jenv->NewStringUTF((const char *) result);
  return jresult;
}


#ifdef __cplusplus
}
#endif

