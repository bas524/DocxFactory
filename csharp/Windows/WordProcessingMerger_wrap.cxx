/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus

/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {

  struct SwigMovePointer {
    T *ptr;

    SwigMovePointer(T *p) : ptr(p) {
    }

    ~SwigMovePointer() {
      delete ptr;
    }

    SwigMovePointer& operator=(SwigMovePointer& rhs) {
      T* oldptr = ptr;
      ptr = 0;
      delete oldptr;
      ptr = rhs.ptr;
      rhs.ptr = 0;
      return *this;
    }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:

  SwigValueWrapper() : pointer(0) {
  }

  SwigValueWrapper& operator=(const T& t) {
    SwigMovePointer tmp(new T(t));
    pointer = tmp;
    return *this;
  }

  operator T&() const {
    return *pointer.ptr;
  }

  T *operator&() {
    return pointer.ptr;
  }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#define SWIGTEMPLATEDISAMBIGUATOR template
#elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#define SWIGTEMPLATEDISAMBIGUATOR template
#else
#define SWIGTEMPLATEDISAMBIGUATOR
#endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#define SWIGINLINE inline
#else
#define SWIGINLINE
#endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define SWIGUNUSED __attribute__ ((__unused__))
#else
#define SWIGUNUSED
#endif
#elif defined(__ICC)
#define SWIGUNUSED __attribute__ ((__unused__))
#else
#define SWIGUNUSED
#endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
#if defined(_MSC_VER)
#pragma warning(disable : 4505) /* unreferenced local function has been removed */
#endif
#endif

#ifndef SWIGUNUSEDPARM
#ifdef __cplusplus
#define SWIGUNUSEDPARM(p)
#else
#define SWIGUNUSEDPARM(p) p SWIGUNUSED
#endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
#define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
#define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#ifndef GCC_HASCLASSVISIBILITY
#define GCC_HASCLASSVISIBILITY
#endif
#endif

#ifndef SWIGEXPORT
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#if defined(STATIC_LINKED)
#define SWIGEXPORT
#else
#define SWIGEXPORT __declspec(dllexport)
#endif
#else
#if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#define SWIGEXPORT __attribute__ ((visibility("default")))
#else
#define SWIGEXPORT
#endif
#endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#define SWIGSTDCALL __stdcall
#else
#define SWIGSTDCALL
#endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
#define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL},
  { SWIG_CSharpArithmeticException, NULL},
  { SWIG_CSharpDivideByZeroException, NULL},
  { SWIG_CSharpIndexOutOfRangeException, NULL},
  { SWIG_CSharpInvalidCastException, NULL},
  { SWIG_CSharpInvalidOperationException, NULL},
  { SWIG_CSharpIOException, NULL},
  { SWIG_CSharpNullReferenceException, NULL},
  { SWIG_CSharpOutOfMemoryException, NULL},
  { SWIG_CSharpOverflowException, NULL},
  { SWIG_CSharpSystemException, NULL}
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL},
  { SWIG_CSharpArgumentNullException, NULL},
  { SWIG_CSharpArgumentOutOfRangeException, NULL}
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t) code < sizeof (SWIG_csharp_exceptions) / sizeof (SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t) code < sizeof (SWIG_csharp_exceptions_argument) / sizeof (SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus

extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_WordProcessingMerger(
        SWIG_CSharpExceptionCallback_t applicationCallback,
        SWIG_CSharpExceptionCallback_t arithmeticCallback,
        SWIG_CSharpExceptionCallback_t divideByZeroCallback,
        SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
        SWIG_CSharpExceptionCallback_t invalidCastCallback,
        SWIG_CSharpExceptionCallback_t invalidOperationCallback,
        SWIG_CSharpExceptionCallback_t ioCallback,
        SWIG_CSharpExceptionCallback_t nullReferenceCallback,
        SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
        SWIG_CSharpExceptionCallback_t overflowCallback,
        SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus

extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_WordProcessingMerger(
        SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
        SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
        SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus

extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_WordProcessingMerger(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "dfw.h"
#include <exception>


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_Load(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_load((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Save(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_save((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Print(char * jarg1, unsigned short jarg2) {
  char *arg1 = (char *) 0;
  unsigned short arg2;

  arg1 = (char *) jarg1;
  arg2 = (unsigned short) jarg2;
  {
    dfw_print((char const *) arg1, arg2);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Close() {
  {
    dfw_close();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Merge(void * jarg1) {
  wchar_t *arg1 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  {
    dfw_mergeW((wchar_t const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetChartValue__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  wchar_t *arg4 = (wchar_t *) 0;
  double arg5;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (wchar_t *)jarg4;
  arg5 = (double) jarg5;
  {
    dfw_setChartValueByStrStrW((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, (wchar_t const *) arg4, arg5);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetChartValue__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4, double jarg5) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  double arg4;
  double arg5;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (double) jarg4;
  arg5 = (double) jarg5;
  {
    dfw_setChartValueByStrDoubleW((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, arg4, arg5);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetChartValue__SWIG_2(char * jarg1, char * jarg2, double jarg3, double jarg4, double jarg5) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  double arg3;
  double arg4;
  double arg5;

  arg1 = (char *) jarg1;
  arg2 = (char *) jarg2;
  arg3 = (double) jarg3;
  arg4 = (double) jarg4;
  arg5 = (double) jarg5;
  {
    dfw_setChartValueByDoubleDouble((char const *) arg1, (char const *) arg2, arg3, arg4, arg5);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetClipboardValue__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  {
    dfw_setClipboardValueByStrW((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetClipboardValue__SWIG_1(char * jarg1, char * jarg2, double jarg3) {
  char *arg1 = (char *) 0;
  char *arg2 = (char *) 0;
  double arg3;

  arg1 = (char *) jarg1;
  arg2 = (char *) jarg2;
  arg3 = (double) jarg3;
  {
    dfw_setClipboardValueByDouble((char const *) arg1, (char const *) arg2, arg3);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_Paste(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_paste((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetUpdateTocMethod(unsigned char jarg1) {
  unsigned char arg1;

  arg1 = (unsigned char) jarg1;
  {
    dfw_setUpdateTocMethod(arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GetUpdateTocMethod() {
  unsigned char jresult;
  unsigned char result;

  {
    result = (unsigned char) dfw_getUpdateTocMethod();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetFields() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getFields();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetItems() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getItems();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetItemParent(char * jarg1) {
  char * jresult;
  char *arg1 = (char *) 0;
  char *result = 0;

  arg1 = (char *) jarg1;
  {
    result = (char *) dfw_getItemParent((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetItemFields(char * jarg1) {
  char * jresult;
  char *arg1 = (char *) 0;
  char *result = 0;

  arg1 = (char *) jarg1;
  {
    result = (char *) dfw_getItemFields((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetCodePage(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_setCodePage((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetNumFracSep(char jarg1) {
  char arg1;

  arg1 = (char) jarg1;
  {
    dfw_setNumFracSep(arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetNumThSep(char jarg1) {
  char arg1;

  arg1 = (char) jarg1;
  {
    dfw_setNumThSep(arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetDateFormat(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_setDateFormat((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetYearOffset(unsigned short jarg1) {
  unsigned short arg1;

  arg1 = (unsigned short) jarg1;
  {
    dfw_setYearOffset(arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetFirstWeekDay(unsigned short jarg1) {
  unsigned short arg1;

  arg1 = (unsigned short) jarg1;
  {
    dfw_setFirstWeekDay(arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetWeekDayNames__SWIG_0() {
  {
    dfw_setWeekDayNames0();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetWeekDayNames__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  wchar_t *arg4 = (wchar_t *) 0;
  wchar_t *arg5 = (wchar_t *) 0;
  wchar_t *arg6 = (wchar_t *) 0;
  wchar_t *arg7 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (wchar_t *)jarg4;
  arg5 = (wchar_t *)jarg5;
  arg6 = (wchar_t *)jarg6;
  arg7 = (wchar_t *)jarg7;
  {
    dfw_setWeekDayNames7W((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, (wchar_t const *) arg4, (wchar_t const *) arg5, (wchar_t const *) arg6, (wchar_t const *) arg7);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetWeekDayNames__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  wchar_t *arg4 = (wchar_t *) 0;
  wchar_t *arg5 = (wchar_t *) 0;
  wchar_t *arg6 = (wchar_t *) 0;
  wchar_t *arg7 = (wchar_t *) 0;
  wchar_t *arg8 = (wchar_t *) 0;
  wchar_t *arg9 = (wchar_t *) 0;
  wchar_t *arg10 = (wchar_t *) 0;
  wchar_t *arg11 = (wchar_t *) 0;
  wchar_t *arg12 = (wchar_t *) 0;
  wchar_t *arg13 = (wchar_t *) 0;
  wchar_t *arg14 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (wchar_t *)jarg4;
  arg5 = (wchar_t *)jarg5;
  arg6 = (wchar_t *)jarg6;
  arg7 = (wchar_t *)jarg7;
  arg8 = (wchar_t *)jarg8;
  arg9 = (wchar_t *)jarg9;
  arg10 = (wchar_t *)jarg10;
  arg11 = (wchar_t *)jarg11;
  arg12 = (wchar_t *)jarg12;
  arg13 = (wchar_t *)jarg13;
  arg14 = (wchar_t *)jarg14;
  {
    dfw_setWeekDayNames14W((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, (wchar_t const *) arg4, (wchar_t const *) arg5, (wchar_t const *) arg6, (wchar_t const *) arg7, (wchar_t const *) arg8, (wchar_t const *) arg9, (wchar_t const *) arg10, (wchar_t const *) arg11, (wchar_t const *) arg12, (wchar_t const *) arg13, (wchar_t const *) arg14);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetMonthNames__SWIG_0() {
  {
    dfw_setMonthNames0();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetMonthNames__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  wchar_t *arg4 = (wchar_t *) 0;
  wchar_t *arg5 = (wchar_t *) 0;
  wchar_t *arg6 = (wchar_t *) 0;
  wchar_t *arg7 = (wchar_t *) 0;
  wchar_t *arg8 = (wchar_t *) 0;
  wchar_t *arg9 = (wchar_t *) 0;
  wchar_t *arg10 = (wchar_t *) 0;
  wchar_t *arg11 = (wchar_t *) 0;
  wchar_t *arg12 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (wchar_t *)jarg4;
  arg5 = (wchar_t *)jarg5;
  arg6 = (wchar_t *)jarg6;
  arg7 = (wchar_t *)jarg7;
  arg8 = (wchar_t *)jarg8;
  arg9 = (wchar_t *)jarg9;
  arg10 = (wchar_t *)jarg10;
  arg11 = (wchar_t *)jarg11;
  arg12 = (wchar_t *)jarg12;
  {
    dfw_setMonthNames12W((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, (wchar_t const *) arg4, (wchar_t const *) arg5, (wchar_t const *) arg6, (wchar_t const *) arg7, (wchar_t const *) arg8, (wchar_t const *) arg9, (wchar_t const *) arg10, (wchar_t const *) arg11, (wchar_t const *) arg12);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetMonthNames__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15, void * jarg16, void * jarg17, void * jarg18, void * jarg19, void * jarg20, void * jarg21, void * jarg22, void * jarg23, void * jarg24) {
  wchar_t *arg1 = (wchar_t *) 0;
  wchar_t *arg2 = (wchar_t *) 0;
  wchar_t *arg3 = (wchar_t *) 0;
  wchar_t *arg4 = (wchar_t *) 0;
  wchar_t *arg5 = (wchar_t *) 0;
  wchar_t *arg6 = (wchar_t *) 0;
  wchar_t *arg7 = (wchar_t *) 0;
  wchar_t *arg8 = (wchar_t *) 0;
  wchar_t *arg9 = (wchar_t *) 0;
  wchar_t *arg10 = (wchar_t *) 0;
  wchar_t *arg11 = (wchar_t *) 0;
  wchar_t *arg12 = (wchar_t *) 0;
  wchar_t *arg13 = (wchar_t *) 0;
  wchar_t *arg14 = (wchar_t *) 0;
  wchar_t *arg15 = (wchar_t *) 0;
  wchar_t *arg16 = (wchar_t *) 0;
  wchar_t *arg17 = (wchar_t *) 0;
  wchar_t *arg18 = (wchar_t *) 0;
  wchar_t *arg19 = (wchar_t *) 0;
  wchar_t *arg20 = (wchar_t *) 0;
  wchar_t *arg21 = (wchar_t *) 0;
  wchar_t *arg22 = (wchar_t *) 0;
  wchar_t *arg23 = (wchar_t *) 0;
  wchar_t *arg24 = (wchar_t *) 0;

  arg1 = (wchar_t *)jarg1;
  arg2 = (wchar_t *)jarg2;
  arg3 = (wchar_t *)jarg3;
  arg4 = (wchar_t *)jarg4;
  arg5 = (wchar_t *)jarg5;
  arg6 = (wchar_t *)jarg6;
  arg7 = (wchar_t *)jarg7;
  arg8 = (wchar_t *)jarg8;
  arg9 = (wchar_t *)jarg9;
  arg10 = (wchar_t *)jarg10;
  arg11 = (wchar_t *)jarg11;
  arg12 = (wchar_t *)jarg12;
  arg13 = (wchar_t *)jarg13;
  arg14 = (wchar_t *)jarg14;
  arg15 = (wchar_t *)jarg15;
  arg16 = (wchar_t *)jarg16;
  arg17 = (wchar_t *)jarg17;
  arg18 = (wchar_t *)jarg18;
  arg19 = (wchar_t *)jarg19;
  arg20 = (wchar_t *)jarg20;
  arg21 = (wchar_t *)jarg21;
  arg22 = (wchar_t *)jarg22;
  arg23 = (wchar_t *)jarg23;
  arg24 = (wchar_t *)jarg24;
  {
    dfw_setMonthNames24W((wchar_t const *) arg1, (wchar_t const *) arg2, (wchar_t const *) arg3, (wchar_t const *) arg4, (wchar_t const *) arg5, (wchar_t const *) arg6, (wchar_t const *) arg7, (wchar_t const *) arg8, (wchar_t const *) arg9, (wchar_t const *) arg10, (wchar_t const *) arg11, (wchar_t const *) arg12, (wchar_t const *) arg13, (wchar_t const *) arg14, (wchar_t const *) arg15, (wchar_t const *) arg16, (wchar_t const *) arg17, (wchar_t const *) arg18, (wchar_t const *) arg19, (wchar_t const *) arg20, (wchar_t const *) arg21, (wchar_t const *) arg22, (wchar_t const *) arg23, (wchar_t const *) arg24);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetCodePage() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getCodePage();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT char SWIGSTDCALL CSharp_GetNumFracSep() {
  char jresult;
  char result;

  {
    result = (char) dfw_getNumFracSep();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT char SWIGSTDCALL CSharp_GetNumThSep() {
  char jresult;
  char result;

  {
    result = (char) dfw_getNumThSep();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetDateFormat() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getDateFormat();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT unsigned short SWIGSTDCALL CSharp_GetYearOffset() {
  unsigned short jresult;
  unsigned short result;

  {
    result = (unsigned short) dfw_getYearOffset();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT unsigned short SWIGSTDCALL CSharp_GetFirstWeekDay() {
  unsigned short jresult;
  unsigned short result;

  {
    result = (unsigned short) dfw_getFirstWeekDay();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_GetWeekDayFullNames() {
  void * jresult;
  wchar_t *result = 0;

  {
    result = (wchar_t *)dfw_getWeekDayFullNamesW();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = (void *) result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_GetWeekDayShortNames() {
  void * jresult;
  wchar_t *result = 0;

  {
    result = (wchar_t *)dfw_getWeekDayShortNamesW();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = (void *) result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_GetMonthFullNames() {
  void * jresult;
  wchar_t *result = 0;

  {
    result = (wchar_t *)dfw_getMonthFullNamesW();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = (void *) result;
  return jresult;
}

SWIGEXPORT void * SWIGSTDCALL CSharp_GetMonthShortNames() {
  void * jresult;
  wchar_t *result = 0;

  {
    result = (wchar_t *)dfw_getMonthShortNamesW();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = (void *) result;
  return jresult;
}

SWIGEXPORT void SWIGSTDCALL CSharp_SetTempDir(char * jarg1) {
  char *arg1 = (char *) 0;

  arg1 = (char *) jarg1;
  {
    dfw_setTempDir((char const *) arg1);
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return;
    }
  }
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetTempDir() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getTempDir();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}

SWIGEXPORT char * SWIGSTDCALL CSharp_GetWorkDir() {
  char * jresult;
  char *result = 0;

  {
    result = (char *) dfw_getWorkDir();
    if (dfw_getErrorFlag()) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, dfw_getErrorWhat(), "");
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *) result);
  return jresult;
}


#ifdef __cplusplus
}
#endif

